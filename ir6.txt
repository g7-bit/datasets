import numpy as np


def calculate_pagerank(adjacency_matrix, damping_factor=0.85, max_iterations=100, tolerance=1e-6):
    """
    Calculate PageRank using the power iteration method.

    Parameters:
        adjacency_matrix (numpy.ndarray): Adjacency matrix representing the graph.
        damping_factor (float): Damping factor for the PageRank algorithm.
        max_iterations (int): Maximum number of iterations for convergence.
        tolerance (float): Convergence tolerance.

    Returns:
        numpy.ndarray: PageRank scores for each node.
    """
    num_nodes = len(adjacency_matrix)
    initial_pagerank = np.ones(num_nodes) / num_nodes
    pagerank = initial_pagerank

    for i in range(max_iterations):
        new_pagerank = (1 - damping_factor) / num_nodes + damping_factor * np.dot(adjacency_matrix.T, pagerank)
        if np.linalg.norm(new_pagerank - pagerank) < tolerance:
            break
        pagerank = new_pagerank

    return pagerank





# Example usage
if __name__ == "__main__":
    # Sample adjacency matrix (representing a simple directed graph)
    # Adjust the adjacency matrix based on your specific graph
    adjacency_matrix = np.array([
        [0, 1, 0],
        [1, 0, 1],
        [0, 1, 0]
    ])

    # Calculate PageRank
    pagerank = calculate_pagerank(adjacency_matrix)

    # Print the PageRank scores for each node
    for i, pr in enumerate(pagerank):
        print(f"Node {i+1}: PageRank = {pr:.4f}")
